### YamlMime:ManagedReference
items:
- uid: TicketSystem.DatabaseRepository.ITicketDatabase
  commentId: T:TicketSystem.DatabaseRepository.ITicketDatabase
  id: ITicketDatabase
  parent: TicketSystem.DatabaseRepository
  children:
  - TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(System.String,System.String)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(System.String,System.String,System.String,System.String)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  langs:
  - csharp
  - vb
  name: ITicketDatabase
  nameWithType: ITicketDatabase
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase
  type: Interface
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: ITicketDatabase
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 5
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  syntax:
    content: public interface ITicketDatabase
    content.vb: Public Interface ITicketDatabase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(System.String,System.String)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(System.String,System.String)
  id: EventAdd(System.String,System.String)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: EventAdd(String, String)
  nameWithType: ITicketDatabase.EventAdd(String, String)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: EventAdd
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 13
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nAdd a new Event to the database\n"
  example: []
  syntax:
    content: TicketEvent EventAdd(string name, string description)
    parameters:
    - id: name
      type: System.String
      description: Name of the event
    - id: description
      type: System.String
      description: A desription of the event, html markup of the event is allowed
    return:
      type: ClassLibrary.TicketEvent
      description: An object representing the newly created TicketEvent
    content.vb: Function EventAdd(name As String, description As String) As TicketEvent
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(System.String,System.String,System.String,System.String)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(System.String,System.String,System.String,System.String)
  id: VenueAdd(System.String,System.String,System.String,System.String)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenueAdd(String, String, String, String)
  nameWithType: ITicketDatabase.VenueAdd(String, String, String, String)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: VenueAdd
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 23
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nAdd a new venue to the database\n"
  example: []
  syntax:
    content: Venue VenueAdd(string name, string address, string city, string country)
    parameters:
    - id: name
      type: System.String
      description: Name of the venue
    - id: address
      type: System.String
      description: Physical address of the venue
    - id: city
      type: System.String
      description: City part of the adress
    - id: country
      type: System.String
      description: Country part of the adress
    return:
      type: ClassLibrary.Venue
      description: An object representing the newly created Venue
    content.vb: Function VenueAdd(name As String, address As String, city As String, country As String) As Venue
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  id: VenuesFind(System.String)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenuesFind(String)
  nameWithType: ITicketDatabase.VenuesFind(String)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: VenuesFind
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 31
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nFind all venus matching the query\n"
  example: []
  syntax:
    content: Venue VenuesFind(string query)
    parameters:
    - id: query
      type: System.String
      description: A text which is user i looking for in the venues
    return:
      type: ClassLibrary.Venue
      description: A list of venus matching the query
    content.vb: Function VenuesFind(query As String) As Venue
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind*
references:
- uid: TicketSystem.DatabaseRepository
  commentId: N:TicketSystem.DatabaseRepository
  isExternal: false
  name: TicketSystem.DatabaseRepository
  nameWithType: TicketSystem.DatabaseRepository
  fullName: TicketSystem.DatabaseRepository
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd
  isExternal: false
  name: EventAdd
  nameWithType: ITicketDatabase.EventAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ClassLibrary.TicketEvent
  commentId: T:ClassLibrary.TicketEvent
  parent: ClassLibrary
  isExternal: false
  name: TicketEvent
  nameWithType: TicketEvent
  fullName: ClassLibrary.TicketEvent
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ClassLibrary
  commentId: N:ClassLibrary
  isExternal: false
  name: ClassLibrary
  nameWithType: ClassLibrary
  fullName: ClassLibrary
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd
  isExternal: false
  name: VenueAdd
  nameWithType: ITicketDatabase.VenueAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd
- uid: ClassLibrary.Venue
  commentId: T:ClassLibrary.Venue
  parent: ClassLibrary
  isExternal: false
  name: Venue
  nameWithType: Venue
  fullName: ClassLibrary.Venue
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind
  isExternal: false
  name: VenuesFind
  nameWithType: ITicketDatabase.VenuesFind
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind
