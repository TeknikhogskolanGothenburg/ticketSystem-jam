### YamlMime:ManagedReference
items:
- uid: TicketSystem.DatabaseRepository.ITicketDatabase
  commentId: T:TicketSystem.DatabaseRepository.ITicketDatabase
  id: ITicketDatabase
  parent: TicketSystem.DatabaseRepository
  children:
  - TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd(ClassLibrary.TicketEvent)
  - TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues(System.Int32)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd(ClassLibrary.Venue)
  langs:
  - csharp
  - vb
  name: ITicketDatabase
  nameWithType: ITicketDatabase
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase
  type: Interface
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: ITicketDatabase
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 5
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  syntax:
    content: public interface ITicketDatabase
    content.vb: Public Interface ITicketDatabase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd(ClassLibrary.TicketEvent)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd(ClassLibrary.TicketEvent)
  id: EventsAdd(ClassLibrary.TicketEvent)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: EventsAdd(TicketEvent)
  nameWithType: ITicketDatabase.EventsAdd(TicketEvent)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd(ClassLibrary.TicketEvent)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: EventsAdd
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 13
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nAdd a new Event to the database\n"
  example: []
  syntax:
    content: TicketEvent EventsAdd(TicketEvent ticketEvent)
    parameters:
    - id: ticketEvent
      type: ClassLibrary.TicketEvent
    return:
      type: ClassLibrary.TicketEvent
      description: An object representing the newly created TicketEvent
    content.vb: Function EventsAdd(ticketEvent As TicketEvent) As TicketEvent
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd(ClassLibrary.Venue)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd(ClassLibrary.Venue)
  id: VenuesAdd(ClassLibrary.Venue)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenuesAdd(Venue)
  nameWithType: ITicketDatabase.VenuesAdd(Venue)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd(ClassLibrary.Venue)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: VenuesAdd
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 23
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nAdd a new venue to the database\n"
  example: []
  syntax:
    content: Venue VenuesAdd(Venue venue)
    parameters:
    - id: venue
      type: ClassLibrary.Venue
    return:
      type: ClassLibrary.Venue
      description: An object representing the newly created Venue
    content.vb: Function VenuesAdd(venue As Venue) As Venue
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues(System.Int32)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues(System.Int32)
  id: GetVenues(System.Int32)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: GetVenues(Int32)
  nameWithType: ITicketDatabase.GetVenues(Int32)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues(System.Int32)
  type: Method
  source:
    remote:
      path: src/DatabaseRepository/ITicketDatabase.cs
      branch: master
      repo: https://github.com/agngus/ticketSystem-jam.git
    id: GetVenues
    path: src/DatabaseRepository/ITicketDatabase.cs
    startLine: 31
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nFind all venus matching the query\n"
  example: []
  syntax:
    content: Venue GetVenues(int id)
    parameters:
    - id: id
      type: System.Int32
      description: A text which is user i looking for in the venues
    return:
      type: ClassLibrary.Venue
      description: A list of venus matching the query
    content.vb: Function GetVenues(id As Integer) As Venue
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues*
references:
- uid: TicketSystem.DatabaseRepository
  commentId: N:TicketSystem.DatabaseRepository
  isExternal: false
  name: TicketSystem.DatabaseRepository
  nameWithType: TicketSystem.DatabaseRepository
  fullName: TicketSystem.DatabaseRepository
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd
  isExternal: false
  name: EventsAdd
  nameWithType: ITicketDatabase.EventsAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventsAdd
- uid: ClassLibrary.TicketEvent
  commentId: T:ClassLibrary.TicketEvent
  parent: ClassLibrary
  isExternal: false
  name: TicketEvent
  nameWithType: TicketEvent
  fullName: ClassLibrary.TicketEvent
- uid: ClassLibrary
  commentId: N:ClassLibrary
  isExternal: false
  name: ClassLibrary
  nameWithType: ClassLibrary
  fullName: ClassLibrary
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd
  isExternal: false
  name: VenuesAdd
  nameWithType: ITicketDatabase.VenuesAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesAdd
- uid: ClassLibrary.Venue
  commentId: T:ClassLibrary.Venue
  parent: ClassLibrary
  isExternal: false
  name: Venue
  nameWithType: Venue
  fullName: ClassLibrary.Venue
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues
  isExternal: false
  name: GetVenues
  nameWithType: ITicketDatabase.GetVenues
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.GetVenues
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
